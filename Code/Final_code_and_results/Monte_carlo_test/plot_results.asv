results = load("Monte_carlo_test/results.mat");
results = results.results;

s_nodes = results(:, 1);
t_nodes = results(:, 2);
x_meas = results(:, 3);
y_meas = results(:, 4);
ref_angle = results(:, 5);
meas_angle = results(:, 6);
error_angle = results(:, 7);
ref_speed = results(:, 8);
meas_speed = results(:, 9);
ref_w = results(:, 10);
meas_w = results(:, 11);
target_reached = results(:, 12);

num_sims = length(s_nodes);
planner = route_planner();
map = planner.map;
nodes = map.nodes;
len = length(nodes);

%%%
% Plot map
%%%

id = zeros(len, 1, 1, "double");
x = zeros(len, 1, 1, "double");
y = zeros(len, 1, 1, "double");

for n=1:len
    id(n) = nodes{n}.id;
    x(n) = nodes{n}.x_coord;
    y(n) = nodes{n}.y_coord;
end

hold on
G = map.weighted_graph;
p = plot(G, 'XData', x, 'YData', y, 'LineWidth',0.75, '');

r = 0.1;
theta = linspace(0,2*pi);
for n=1:len
    xc = r*cos(theta) + x(n);
    yc = r*sin(theta) + y(n);
    plot(xc, yc)
end



%%%
% Plot measured coordinates
%%%
labels = string.empty(0, num_sims);

for n=1:num_sims
    plot(x_meas{n}.Data, y_meas{n}.Data)
    labels(n) = "Node "+s_nodes(n)+" to node "+t_nodes(n);
end


hold off    
grid on
legend("Possible routes");